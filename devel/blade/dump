bladefunctions:_BUILD_DIR_PATTERN="blade-bin|(build(32|64)_(debug|release))"
bladefunctions:        if ! [[ "$PWD" =~ $_BUILD_DIR_PATTERN ]]; then
bladefunctions:        if [[ "$PWD" =~ $_BUILD_DIR_PATTERN ]]; then
bladefunctions:            if relpath=$(pwd | sed -r -e "s%^$root/($_BUILD_DIR_PATTERN)%%"); then
doc/FAQ_zh_CN.md:### vim 编辑 BUILD 文件时没有语法高亮
doc/FAQ_zh_CN.md: * 然后检查 ~/.vimrc 里是否有 autocmd! BufRead,BufNewFile BUILD set filetype=blade
doc/FAQ_zh_CN.md:修改 BUILD 文件，去掉 srcs
doc/user_manual_zh_CN.md:BUILD文件
doc/user_manual_zh_CN.md:Blade 通过一系列的名字为 "BUILD" 的文件（文件名全大写），这些文件需要开发者去编写。每个 BUILD文件通过一组目标描述函数描述了一个目标的源文件，所依赖的其他目标，以及其他一些属性。
doc/user_manual_zh_CN.md:### BUILD文件的示例
doc/user_manual_zh_CN.md:范例：common/base/string/BUILD
doc/user_manual_zh_CN.md:$BUILD_DIR -- 可被替换为 build[64,32]_[release,debug] 输出目录
doc/user_manual_zh_CN.md:比如poppy下的BUILD文件里用的静态资源：
doc/user_manual_zh_CN.md:* tests 依赖的测试数据改变，这种依赖为显式依赖，用户需要使用BUILD文件指定，如testdata。
doc/user_manual_zh_CN.md:自动生成以目录名为库名的cc_library，以测试文件的名为名的cc_test，proto的BUILD文件，并假设这些测试都依赖这个库
example/run.sh:    # Cleanup BLADE_ROOT and BUILDs to avoid ran by 'blade build ...' on upper dirs
example/run.sh:    find . -name BUILD | xargs rm
example/run.sh:for f in `find . -name BUILD.EXAMPLE`; do
genlibbuild:# generate BUILD file for library dir
install:    autocmd! BufRead,BufNewFile BUILD set filetype=blade
lsnobuild:# list Makefiles without corresponding BUILD
lsnobuild:    if [ ! -f "`dirname $f`/BUILD" ] ; then
lsrc:# list srcs as BUILD file format, except test files.
README.md:库 foo 依赖库 common，那么在库 foo 的 BUILD 文件中列入依赖：
Binary file src/blade/target.pyc matches
src/blade/load_build_files.py:    """ Report dir or BUILD file does not exist
src/blade/load_build_files.py:    """A global function can be called in BUILD to filter srcs/deps by target"""
src/blade/load_build_files.py:    """_load_build_file to load the BUILD and place the targets into database.
src/blade/load_build_files.py:    Invoked by _load_targets.  Load and execute the BUILD
src/blade/load_build_files.py:    file, which is a Python script, in source_dir.  Statements in BUILD
src/blade/load_build_files.py:    target/rules into global variables target_database.  If path/BUILD
src/blade/load_build_files.py:    caller and used to avoid duplicated execution of BUILD files.
src/blade/load_build_files.py:    # Initialize the build_target at first time, to be used for BUILD file
src/blade/load_build_files.py:    build_file = os.path.join(source_dir, 'BUILD')
src/blade/load_build_files.py:            # The magic here is that a BUILD file is a Python script,
src/blade/load_build_files.py:    and their direct and indirect dependencies, by loading related BUILD
src/blade/load_build_files.py:    # to prevent duplicated loading of BUILD files
src/blade/load_build_files.py:    # Load BUILD files in paths, and add all loaded targets into
src/blade/load_build_files.py:    # propagate to load BUILD files containing directly and indirectly
src/blade/load_build_files.py:    # which is a subset of target_databased created by loading  BUILD files.
Binary file src/blade/build_rules.pyc matches
Binary file src/blade/rules_generator.pyc matches
Binary file src/blade/dependency_analyzer.pyc matches
src/blade/cc_targets.py:        Return the cpp flags according to the BUILD file and other configs.
Binary file src/blade/blade_main.pyc matches
src/blade/swig_library_target.py:        self._write_rule('%s.Append(BUILDERS={"%s" : %s})' % (
src/blade/swig_library_target.py:        self._write_rule('%s.Append(BUILDERS={"%s" : %s})' % (
src/blade/swig_library_target.py:        self._write_rule('%s.Append(BUILDERS={"%s" : %s})' % (
src/blade/gen_rule_target.py:        cmd = cmd.replace('$BUILD_DIR', self.build_path)
Binary file src/blade/test_runner.pyc matches
src/blade/test_runner.py:            'BUILD_URL', 'BUILD_TAG', 'SVN_REVISION',
src/blade/test_runner.py:            'BUILD_ID', 'EXECUTOR_NUMBER', 'START_USER',
src/blade/test_runner.py:            'IF_PKG', 'BUILD_NUMBER', 'HUDSON_COOKIE',
Binary file src/blade/swig_library_target.pyc matches
Binary file src/blade/blade.pyc matches
src/blade/scons_helper.py:    env['BUILDERS']['Program'] = program
src/blade/scons_helper.py:    env['BUILDERS']['SharedLibrary'] = sharedlib
src/blade/target.py:        deps: the deps list in BUILD file.
src/blade/target.py:                # System libaray, they don't have entry in BUILD so we need
src/blade/target.py:        deps: the deps list in BUILD file
src/blade/target.py:        but it really needs when user specify it in BUILD file.
src/blade/rules_generator.py:        builder_list.append('BUILDERS = {"Proto" : proto_bld}')
src/blade/rules_generator.py:        builder_list.append('BUILDERS = {"ProtoJava" : proto_java_bld}')
src/blade/rules_generator.py:        builder_list.append('BUILDERS = {"ProtoPhp" : proto_php_bld}')
src/blade/rules_generator.py:        builder_list.append('BUILDERS = {"ProtoPython" : proto_python_bld}')
src/blade/rules_generator.py:        builder_list.append('BUILDERS = {"Thrift" : thrift_bld}')
src/blade/rules_generator.py:        builder_list.append('BUILDERS = {"ThriftJava" : thrift_java_bld}')
src/blade/rules_generator.py:        builder_list.append('BUILDERS = {"ThriftPython" : thrift_python_bld}')
src/blade/rules_generator.py:        builder_list.append('BUILDERS = {"BladeJar" : blade_jar_bld}')
src/blade/rules_generator.py:        builder_list.append('BUILDERS = {"Yacc" : yacc_bld}')
src/blade/rules_generator.py:        builder_list.append('BUILDERS = {"ResourceHeader" : resource_header_bld}')
src/blade/rules_generator.py:        builder_list.append('BUILDERS = {"ResourceFile" : resource_file_bld}')
src/blade/rules_generator.py:        builder_list.append('BUILDERS = {"PythonBinary" : python_binary_bld}')
Binary file src/blade/cc_targets.pyc matches
src/blade/blade_main.py: error-prone complexity.  With Blade, users wrote a BUILD file and
src/blade/blade_main.py: put it in each of the source directory.  In each BUILD file, there
src/blade/blade_main.py:   //<source_dir>:<target_name> -- target defined in <source_dir>/BUILD
src/blade/blade_main.py:   :<target_name>               -- target defined in the current BUILD file
src/blade/blade_main.py: specifying where the BUILD file locates, <target_name> specifies a
src/blade/blade_main.py: target in the BUILD file, and '//' denotes the root of the source tree.
src/blade/blade_main.py:   <path>:<target_name> -- to build target defined in <path>/BUILD
src/blade/blade_main.py:   <path>               -- to build all targets defined in <path>/BUILD
src/blade/blade_main.py:   <path>/...           -- to build all targets in all BUILD files in
src/blade/blade_main.py: path, which might be a relative path, but <source_dir> in a BUILD
src/blade/blade_main.py: builds all targets in base/BUILD, all targets in all BUILDs under
src/blade/blade_main.py: parallel_svm/BUILD
src/blade/dependency_analyzer.py: from BUILD files and will find all of the targets needed by the target and
src/blade/dependency_analyzer.py:    Input: related targets after loading targets from BUILD files.
Binary file src/blade/gen_rule_target.pyc matches
src/blade/build_rules.py: Manage symbols can be used in BUILD files.
src/blade/build_rules.py:    """Register a variable that accessiable in BUILD file """
src/blade/build_rules.py:    """Register a function as a build function that callable in BUILD file """
Binary file src/blade/load_build_files.pyc matches
src/blade/blade.py:        # Source dir of current loading BUILD file
src/blade/blade.py:        # BUILD files containing these command line targets; global target
src/blade/blade.py:        # functions, i.e., cc_libarary, cc_binary and etc, in these BUILD
src/blade/blade.py:        console.info('loading BUILDs...')
src/blade/blade.py:                    'target name %s is duplicate in //%s/BUILD' % (
src/test/load_builds_test.py:        """Test that all targets in the test project BUILD files
src/test/runtest.sh:    # Cleanup BLADE_ROOT and BUILDs to avoid ran by 'blade build ...' on upper dirs
src/test/runtest.sh:    find testdata -name BUILD | xargs rm
src/test/runtest.sh:for f in `find testdata -name BUILD.TEST`; do
vim/syntax/blade.vim:"   au! BufRead,BufNewFile BUILD setfiletype blade
vim/ftdetect/blade.vim:    autocmd! BufRead,BufNewFile BUILD setfiletype blade
